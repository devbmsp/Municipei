// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var c = C.FromJson(jsonString);

namespace MunModel
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MunicipiosList
    {
        [JsonProperty("UF")]
        public long Uf { get; set; }

        [JsonProperty("Nome_UF")]
        [JsonConverter(typeof(NomeUfConverter))]
        public NomeUf NomeUf { get; set; }

        [JsonProperty("Região Geográfica Intermediária")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long RegiaoGeograficaIntermediaria { get; set; }

        [JsonProperty("Nome Região Geográfica Intermediária")]
        public string NomeRegiaoGeograficaIntermediaria { get; set; }

        [JsonProperty("Região Geográfica Imediata")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long RegiaoGeograficaImediata { get; set; }

        [JsonProperty("Nome Região Geográfica Imediata")]
        public string NomeRegiaoGeograficaImediata { get; set; }

        [JsonProperty("Mesorregião Geográfica")]
        public string MesoregiaoGeografica { get; set; }

        [JsonProperty("Nome_Mesorregião")]
        public string NomeMesoregiao { get; set; }

        [JsonProperty("Microrregião Geográfica")]
        public string MicrorregiaoGeografica { get; set; }

        [JsonProperty("Nome_Microrregião")]
        public string NomeMicrorregiao { get; set; }

        [JsonProperty("Município")]
        public string Municipio { get; set; }

        [JsonProperty("Código Município Completo")]
        public string CodigoMunicipioCompleto { get; set; }

        [JsonProperty("Nome_Município")]
        public string NomeMunicipio { get; set; }
    }

    public enum NomeUf { Acre, Alagoas, Amapá, Amazonas, Bahia, Ceará, DistritoFederal, EspíritoSanto, Goiás, Maranhão, MatoGrosso, MatoGrossoDoSul, MinasGerais, Paraná, Paraíba, Pará, Pernambuco, Piauí, RioDeJaneiro, RioGrandeDoNorte, RioGrandeDoSul, Rondônia, Roraima, SantaCatarina, Sergipe, SãoPaulo, Tocantins };

    public partial class C
    {
        public static C[] FromJson(string json) => JsonConvert.DeserializeObject<C[]>(json, MunModel.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this C[] self) => JsonConvert.SerializeObject(self, MunModel.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NomeUfConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class NomeUfConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NomeUf) || t == typeof(NomeUf?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Acre":
                    return NomeUf.Acre;
                case "Alagoas":
                    return NomeUf.Alagoas;
                case "Amapá":
                    return NomeUf.Amapá;
                case "Amazonas":
                    return NomeUf.Amazonas;
                case "Bahia":
                    return NomeUf.Bahia;
                case "Ceará":
                    return NomeUf.Ceará;
                case "Distrito Federal":
                    return NomeUf.DistritoFederal;
                case "Espírito Santo":
                    return NomeUf.EspíritoSanto;
                case "Goiás":
                    return NomeUf.Goiás;
                case "Maranhão":
                    return NomeUf.Maranhão;
                case "Mato Grosso":
                    return NomeUf.MatoGrosso;
                case "Mato Grosso do Sul":
                    return NomeUf.MatoGrossoDoSul;
                case "Minas Gerais":
                    return NomeUf.MinasGerais;
                case "Paraná":
                    return NomeUf.Paraná;
                case "Paraíba":
                    return NomeUf.Paraíba;
                case "Pará":
                    return NomeUf.Pará;
                case "Pernambuco":
                    return NomeUf.Pernambuco;
                case "Piauí":
                    return NomeUf.Piauí;
                case "Rio Grande do Norte":
                    return NomeUf.RioGrandeDoNorte;
                case "Rio Grande do Sul":
                    return NomeUf.RioGrandeDoSul;
                case "Rio de Janeiro":
                    return NomeUf.RioDeJaneiro;
                case "Rondônia":
                    return NomeUf.Rondônia;
                case "Roraima":
                    return NomeUf.Roraima;
                case "Santa Catarina":
                    return NomeUf.SantaCatarina;
                case "Sergipe":
                    return NomeUf.Sergipe;
                case "São Paulo":
                    return NomeUf.SãoPaulo;
                case "Tocantins":
                    return NomeUf.Tocantins;
            }
            throw new Exception("Cannot unmarshal type NomeUf");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NomeUf)untypedValue;
            switch (value)
            {
                case NomeUf.Acre:
                    serializer.Serialize(writer, "Acre");
                    return;
                case NomeUf.Alagoas:
                    serializer.Serialize(writer, "Alagoas");
                    return;
                case NomeUf.Amapá:
                    serializer.Serialize(writer, "Amapá");
                    return;
                case NomeUf.Amazonas:
                    serializer.Serialize(writer, "Amazonas");
                    return;
                case NomeUf.Bahia:
                    serializer.Serialize(writer, "Bahia");
                    return;
                case NomeUf.Ceará:
                    serializer.Serialize(writer, "Ceará");
                    return;
                case NomeUf.DistritoFederal:
                    serializer.Serialize(writer, "Distrito Federal");
                    return;
                case NomeUf.EspíritoSanto:
                    serializer.Serialize(writer, "Espírito Santo");
                    return;
                case NomeUf.Goiás:
                    serializer.Serialize(writer, "Goiás");
                    return;
                case NomeUf.Maranhão:
                    serializer.Serialize(writer, "Maranhão");
                    return;
                case NomeUf.MatoGrosso:
                    serializer.Serialize(writer, "Mato Grosso");
                    return;
                case NomeUf.MatoGrossoDoSul:
                    serializer.Serialize(writer, "Mato Grosso do Sul");
                    return;
                case NomeUf.MinasGerais:
                    serializer.Serialize(writer, "Minas Gerais");
                    return;
                case NomeUf.Paraná:
                    serializer.Serialize(writer, "Paraná");
                    return;
                case NomeUf.Paraíba:
                    serializer.Serialize(writer, "Paraíba");
                    return;
                case NomeUf.Pará:
                    serializer.Serialize(writer, "Pará");
                    return;
                case NomeUf.Pernambuco:
                    serializer.Serialize(writer, "Pernambuco");
                    return;
                case NomeUf.Piauí:
                    serializer.Serialize(writer, "Piauí");
                    return;
                case NomeUf.RioGrandeDoNorte:
                    serializer.Serialize(writer, "Rio Grande do Norte");
                    return;
                case NomeUf.RioGrandeDoSul:
                    serializer.Serialize(writer, "Rio Grande do Sul");
                    return;
                case NomeUf.RioDeJaneiro:
                    serializer.Serialize(writer, "Rio de Janeiro");
                    return;
                case NomeUf.Rondônia:
                    serializer.Serialize(writer, "Rondônia");
                    return;
                case NomeUf.Roraima:
                    serializer.Serialize(writer, "Roraima");
                    return;
                case NomeUf.SantaCatarina:
                    serializer.Serialize(writer, "Santa Catarina");
                    return;
                case NomeUf.Sergipe:
                    serializer.Serialize(writer, "Sergipe");
                    return;
                case NomeUf.SãoPaulo:
                    serializer.Serialize(writer, "São Paulo");
                    return;
                case NomeUf.Tocantins:
                    serializer.Serialize(writer, "Tocantins");
                    return;
            }
            throw new Exception("Cannot marshal type NomeUf");
        }

        public static readonly NomeUfConverter Singleton = new NomeUfConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
